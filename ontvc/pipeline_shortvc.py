"""
==================================
Pipeline short-read variantcalling
==================================


Overview
==================

This workflow processes illumina fastq files. The aim of this pipeline
is to generate a lits of variants associated with each sample

Usage
=====

To generate the config file to change the running of the pipeline you need to
run:

ontvc shortvc config

This will generate a pipeline.yml file that the user can modify to change the
output of the pipeline. Once the user has modified the pipeline.yml file the
pipeline can then be ran using the following commandline command:

ontvc shortvc make full -v5

You can run the pipeline locally (without a cluster) using --local

ontvc shortvc make full -v5 --local

Configuration
-------------

The pipeline uses CGAT-core as the pipeline language. Please see the
docuemntation for how to install ontvc.


Input files
-----------

The workflow requires the following inputs:
* a single fastq file generated by guppy basecalling

Pipeline output
==================

Code
==================
"""
import sys
import os
import pysam
import glob
import pandas as pd
from ruffus import *
import cgatcore.iotools as iotools
import cgatcore.pipeline as P
import cgatcore.experiment as E
from pathlib import Path
from cgatcore.pipeline import cluster_runnable

# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
     "../pipeline.yml",
     "pipeline.yml"])



FASTQTARGET = "data.dir/*.fastq.1.gz"

@follows(mkdir("hisat2.dir"))
@transform(FASTQTARGET,
           regex("data\.dir/(.*)\.fastq\.1\.gz"),
           r"hisat2.dir/\1.sam")
def run_hisat2(infile, outfile):
    """
    Maps reads against the reference genome provided using hisat2.
    """

    threads = PARAMS["threads"]
    reference_genome = PARAMS["reference_genome_prefix"]

    paired = PARAMS["paired"]
    
    hisat2_options = PARAMS['hisat2_options']

    if paired:
        infile_one = Path(infile)
        infile_two = Path(infile).with_suffix("").with_suffix(".2.gz")

        paired_statement = f"-1 {infile_one} -2 {infile_two}"
    else:
        paired_statement = f"-U {infile}"

    statement = f"""hisat2 {hisat2_options} -x {reference_genome}
                    {paired_statement}
                    -S {outfile}
                    -p {threads}"""

    P.run(statement, job_options='-t 24:00:00')


@transform(run_hisat2,
           regex("hisat2\.dir/(.*).sam"),
           r"hisat2.dir/\1.sorted.bam")
def run_samtools(infile, outfile):
    """
    Sorts and indexes BAM files generated by hisat2.
    """

    unsorted = Path(outfile).with_suffix("").with_suffix(".bam")

    statement = f"""samtools view -bh {infile} > {unsorted} &&
                    samtools sort {unsorted} -o {outfile} &&
                    samtools index {outfile}"""

    P.run(statement, job_options='-t 24:00:00')


@transform(run_samtools,
           regex("hisat2\.dir/(.*)\.sorted\.bam"),
           r"hisat2.dir/\1_stats.tsv")
def run_samstats(infile, outfile):
    """
    Performs various stats on the bam files
    """


    statement = f"""samtools flagstats {infile} > {infile}.flagstats.tsv &&
                    samtools idxstats {infile} > {infile}.idxstats.tsv &&
                    samtools stats {infile} > {outfile}"""

    P.run(statement, job_options='-t 24:00:00')


@follows(mkdir("gene_counts.dir/featurecounts"))
@transform(run_samtools,
           regex("hisat2\.dir/(.*)\.sorted\.bam"),
           r"gene_counts.dir/featurecounts/\1.tsv")
def run_featurecounts(infile, outfile):
    """
    Generates a gene counts matrix using featureCounts.
    """

    reference_genome_annotations = PARAMS["reference_genome_annotations"]
    options = PARAMS['featurecounts_options']

    statement = f"""featureCounts {options}
                    -a {reference_genome_annotations}
                    -o {outfile}
                    {infile}"""

    P.run(statement, job_options='-t 24:00:00')


@transform(run_samtools,
           regex("hisat2.dir/(\S+).sorted.bam"),
           r"hisat2.dir/\1.bw")
def run_bamcoverage(infile, outfile):
    ''' '''

    statement = '''bamCoverage -b %(infile)s -o %(outfile)s '''

    P.run(statement, job_options='-t 24:00:00')


@follows(run_featurecounts, run_bamcoverage)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    
